# TicketCharts Full Source Dump
# NOTE: package-lock.json files and binaries omitted; rest of the source is included below.


================================================================================
FILE: README.md
================================================================================

# TicketCharts — Monorepo (Backend on Railway, Frontend on GitHub Pages)

## Structure
- `backend/` — Node + Express + Socket.io API (MongoDB, JWT)
- `frontend/` — React + Vite SPA

## Environment
- Backend: copy `backend/.env.example` to `backend/.env` (locally); on Railway add the same keys in Variables.
- Frontend (GitHub Pages): set repository **Variables** (Settings → Secrets and variables → Variables):
  - `VITE_BASE_PATH` = `/REPO_NAME/`
  - `VITE_API_BASE` = `https://<your-railway>.up.railway.app`
  - `VITE_SOCKET_URL` = `https://<your-railway>.up.railway.app`

## Dev
Terminal 1 (API):
```bash
cd backend
npm i
npm start
```
Terminal 2 (Client):
```bash
cd frontend
npm i
npm run dev
```
The Vite dev server proxies `/api/*` and `/socket.io` to `http://localhost:3000`.

## Deploy

### Backend → Railway
1. Create a new project on Railway and select **Deploy from GitHub** (or use the Dockerfile in `backend/`).
2. If deploying the **backend subfolder**:
   - Set **Root Directory** to `backend`
   - Build command: `npm ci`
   - Start command: `npm start`
3. Variables:
   - `JWT_SECRET` — a long random string
   - `MONGODB_URI` — add a MongoDB add‑on in Railway or paste your Atlas URI
4. Expose `PORT` (Railway sets it automatically). After deploy, note your public URL.

### Frontend → GitHub Pages
This repo includes `.github/workflows/deploy-frontend.yml` to build `frontend/` and publish to Pages.

1. In GitHub, go to **Settings → Pages**:
   - Source: **GitHub Actions**
2. In **Settings → Secrets and variables → Variables**, add:
   - `VITE_BASE_PATH` = `/REPO_NAME/`
   - `VITE_API_BASE` = `https://<your-railway>.up.railway.app`
   - `VITE_SOCKET_URL` = `https://<your-railway>.up.railway.app`
3. Push to `main`. The workflow builds `frontend/` and deploys `frontend/dist` to Pages.
4. Your app will be at `https://<you>.github.io/REPO_NAME/`.

## Notes
- SPA routing on GitHub Pages uses **hash routing**; set by `VITE_USE_HASH_ROUTER=true` in the workflow.
- For local dev, API base is `/api` via Vite proxy; in production Pages, requests go directly to Railway using `VITE_API_BASE`.

================================================================================
FILE: backend/package.json
================================================================================

{
  "name": "ticketchart-backend",
  "version": "1.0.0",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.19.2",
    "socket.io": "^4.7.5",
    "cors": "^2.8.5",
    "mongoose": "^8.5.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.2"
  }
}

================================================================================
FILE: backend/server.js
================================================================================

import express from "express";
import http from "http";
import { Server } from "socket.io";
import crypto from "crypto";
import cors from "cors";
import mongoose from "mongoose";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

// ---- config ----
const JWT_SECRET = process.env.JWT_SECRET || "dev-secret-change-me";
const MONGODB_URI = process.env.MONGODB_URI || process.env.MONGO_URL || "";
const PORT = Number(process.env.PORT || 3000);

// ---- app & sockets ----
const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*" } });

app.use(cors());
app.use(express.json());
app.use(express.static("public"));

/**
 * ✅ Accept both `/api/...` and `/...` by stripping an optional `/api` prefix
 *    before any route handlers run. This makes the backend robust regardless
 *    of the Vite/ingress proxy configuration.
 */
app.use((req, _res, next) => {
  if (req.url.startsWith("/api/")) req.url = req.url.slice(4); // remove '/api'
  next();
});

// ---- Mongo ----
mongoose.set("strictQuery", true);

function maskUri(u) {
  try {
    const url = new URL(u);
    if (url.username || url.password) {
      url.username = "****";
      url.password = "****";
    }
    return url.toString();
  } catch {
    return "<invalid URI>";
  }
}

if (!MONGODB_URI) {
  console.error("❌ No Mongo connection string set. Define MONGODB_URI in your environment.");
  process.exit(1);
}

try {
  await mongoose.connect(MONGODB_URI, {
    serverSelectionTimeoutMS: 10000,
  });
  console.log("✅ Mongo connected:", maskUri(MONGODB_URI));
} catch (err) {
  console.error("❌ MongoDB connection error:", err?.message || err);
  process.exit(1);
}

const userSchema = new mongoose.Schema(
  {
    firstName: String,
    lastName: String,
    email: { type: String, unique: true, index: true },
    phone: String,
    passwordHash: String
  },
  { timestamps: true }
);

const ticketSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", index: true },
  eventName: { type: String, index: true },
  location: String,
  dateISO: String,
  row: Number,
  col: Number,
  purchasedAt: { type: Date, default: Date.now }
});

const User   = mongoose.model("User",   userSchema);
const Ticket = mongoose.model("Ticket", ticketSchema);

// ---------------- In-memory events ----------------
const THEATER_ROWS = 12;
const THEATER_COLS = 15;

const events = new Map();
const holdTimers = new Map();
const HOLD_MS = Number(process.env.HOLD_MS || 2 * 60 * 1000);
const holdKey = (name, row, col) => `${name}:${row}:${col}`;
const roomFor = (name) => `event:${name}`;

function makeSeatGrid(rows, cols) {
  return Array.from({ length: rows }, () => Array(cols).fill("available"));
}

function admitNext(ev) {
  while (ev.active.size < ev.maxActive && ev.queue.length > 0) {
    const nextUser = ev.queue.shift();
    ev.active.add(nextUser);
  }
  io.to(roomFor(ev.name)).emit("queue:update", {
    activeCount: ev.active.size,
    queueLength: ev.queue.length
  });
}

// ---------------- Auth helpers ----------------
function sign(user) {
  return jwt.sign(
    { id: user._id.toString(), email: user.email },
    JWT_SECRET,
    { expiresIn: "7d" }
  );
}
function auth(req, res, next) {
  const h = req.headers.authorization || "";
  const tok = h.startsWith("Bearer ") ? h.slice(7) : null;
  if (!tok) return res.status(401).json({ error: "missing token" });
  try {
    req.user = jwt.verify(tok, JWT_SECRET);
    next();
  } catch {
    return res.status(401).json({ error: "invalid token" });
  }
}

// ---------------- Health ----------------
app.get("/healthz", (_req, res) => res.status(200).send("ok"));
app.get("/health/mongo", async (_req, res) => {
  try {
    await mongoose.connection.db.adminCommand({ ping: 1 });
    res.json({ ok: true });
  } catch (e) {
    res.status(500).json({ ok: false, error: e.message });
  }
});

// ---------------- Auth API ----------------
app.post("/auth/signup", async (req, res) => {
  try {
    const { firstName, lastName, email, phone, password } = req.body || {};
    if (!email || !password) return res.status(400).json({ error: "email & password required" });
    const exists = await User.findOne({ email });
    if (exists) return res.status(409).json({ error: "email taken" });
    const passwordHash = await bcrypt.hash(password, 10);
    const u = await User.create({ firstName, lastName, email, phone, passwordHash });
    return res.json({ token: sign(u) });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "signup failed" });
  }
});

app.post("/auth/login", async (req, res) => {
  const { email, password } = req.body || {};
  const u = await User.findOne({ email });
  if (!u) return res.status(401).json({ error: "invalid credentials" });
  const ok = await bcrypt.compare(password || "", u.passwordHash);
  if (!ok) return res.status(401).json({ error: "invalid credentials" });
  res.json({ token: sign(u) });
});

app.get("/me", auth, async (req, res) => {
  const u = await User.findById(req.user.id).lean();
  const tickets = await Ticket.find({ userId: req.user.id }).lean();
  res.json({
    user: { firstName: u?.firstName, lastName: u?.lastName, email: u?.email, phone: u?.phone },
    tickets
  });
});

// ---------------- Events API ----------------
app.post("/events", (req, res) => {
  const {
    name, category = "Concerts",
    rows = THEATER_ROWS, cols = THEATER_COLS,
    location, dateISO, meta = {}, gated = false
  } = req.body || {};
  if (!name || !rows || !cols) return res.status(400).json({ error: "name, rows, cols required" });
  if (events.has(name)) return res.status(409).json({ error: "name must be unique" });

  const ev = {
    name, category,
    rows, cols,
    location: location || "TBD Arena",
    dateISO: dateISO || new Date().toISOString(),
    seats: makeSeatGrid(rows, cols),
    queue: [],
    active: new Set(),
    maxActive: 10,
    gated: !!gated,
    meta,
    popularity: Math.floor(Math.random() * 50)
  };
  events.set(name, ev);
  return res.status(201).json(summary(ev));
});

app.get("/events", (_req, res) => {
  const list = Array.from(events.values()).map(summary);
  res.json(list);
});

// Overview grouped by category (sorted by date)
app.get("/events/overview", (_req, res) => {
  const byCat = {};
  for (const ev of events.values()) {
    if (!byCat[ev.category]) byCat[ev.category] = [];
    byCat[ev.category].push(summary(ev));
  }
  for (const k of Object.keys(byCat)) {
    byCat[k].sort((a,b)=> new Date(a.dateISO) - new Date(b.dateISO));
  }
  res.json({ byCategory: byCat });
});

// Simple search endpoint used by Explore
app.get("/events/search", (req, res) => {
  const q = String(req.query.q || "").trim().toLowerCase();
  const category = String(req.query.category || "").trim().toLowerCase();
  const city = String(req.query.city || "").trim().toLowerCase();

  const hit = Array.from(events.values()).filter(e => {
    const inQ = !q || e.name.toLowerCase().includes(q) || e.location.toLowerCase().includes(q) ||
                (e.meta?.artist && String(e.meta.artist).toLowerCase().includes(q));
    const inCat = !category || e.category.toLowerCase() === category;
    const inCity = !city || e.location.toLowerCase().includes(city);
    return inQ && inCat && inCity;
  }).map(summary);

  hit.sort((a,b)=> new Date(a.dateISO) - new Date(b.dateISO));
  res.json({ results: hit });
});

// Leaderboard
app.get("/events/trending", (_req, res) => {
  const list = Array.from(events.values())
    .sort((a,b)=> b.popularity - a.popularity)
    .slice(0, 15)
    .map(e => ({ ...summary(e), popularity: e.popularity }));
  res.json({ trending: list });
});

app.get("/events/by-name/:name", (req, res) => {
  const ev = events.get(req.params.name);
  if (!ev) return res.status(404).json({ error: "not found" });
  ev.popularity += 1;
  res.json(detail(ev));
});

// ---- queue ----
function requireAdmitted(req, res, next) {
  const ev = events.get(req.params.name);
  if (!ev) return res.status(404).json({ error: "not found" });

  if (!ev.gated) { req.ev = ev; return next(); }

  const userId = req.user?.id;
  if (!userId || !ev.active.has(userId)) return res.status(403).json({ error: "not admitted" });
  req.ev = ev; next();
}

app.post("/queue/:name/join", auth, (req, res) => {
  const ev = events.get(req.params.name);
  if (!ev) return res.status(404).json({ error: "not found" });

  if (!ev.gated) {
    ev.popularity += 2;
    return res.json({ admitted: true, position: 0, activeCount: ev.active.size, queueLength: ev.queue.length });
  }

  const userId = req.user.id;
  if (ev.active.has(userId)) {
    ev.popularity += 2;
    return res.json({ admitted: true, position: 0, activeCount: ev.active.size, queueLength: ev.queue.length });
  }
  if (!ev.queue.includes(userId)) ev.queue.push(userId);
  ev.popularity += 3;
  admitNext(ev);

  const position = ev.active.has(userId) ? 0 : ev.queue.indexOf(userId) + 1;
  res.json({ admitted: ev.active.has(userId), position, activeCount: ev.active.size, queueLength: ev.queue.length });
});

app.get("/queue/:name/status", auth, (req, res) => {
  const ev = events.get(req.params.name);
  if (!ev) return res.status(404).json({ error: "not found" });

  if (!ev.gated) return res.json({ admitted: true, position: 0, activeCount: ev.active.size, queueLength: ev.queue.length });

  const userId = req.user.id;
  const admitted = ev.active.has(userId);
  const position = admitted ? 0 : (ev.queue.indexOf(userId) + 1 || 0);
  res.json({ admitted, position, activeCount: ev.active.size, queueLength: ev.queue.length });
});

app.post("/queue/:name/leave", auth, (req, res) => {
  const ev = events.get(req.params.name);
  if (!ev) return res.status(404).json({ error: "not found" });

  if (!ev.gated) return res.json({ ok: true });

  const userId = req.user.id;
  const i = ev.queue.indexOf(userId);
  if (i >= 0) ev.queue.splice(i, 1);
  if (ev.active.has(userId)) ev.active.delete(userId);
  admitNext(ev);
  res.json({ ok: true });
});

// ---------- Hold / Unhold / Purchase (multi-seat) ----------
const normalizeSeats = (body) => {
  if (Array.isArray(body?.seats)) return body.seats;
  if (typeof body?.row === "number" && typeof body?.col === "number") return [{ row: body.row, col: body.col }];
  return [];
};

app.post("/events/:name/hold", auth, requireAdmitted, (req, res) => {
  const ev = req.ev;
  const seats = normalizeSeats(req.body);
  if (seats.length === 0) return res.status(400).json({ error: "invalid seat(s)" });

  for (const { row, col } of seats) {
    if (row < 0 || col < 0 || row >= ev.rows || col >= ev.cols) return res.status(400).json({ error: "invalid seat coords" });
    if (ev.seats[row][col] !== "available") return res.status(409).json({ error: "seat not available" });
  }

  const expiresAt = Date.now() + HOLD_MS;
  const response = [];

  for (const { row, col } of seats) {
    ev.seats[row][col] = "held";

    const key = holdKey(ev.name, row, col);
    if (holdTimers.has(key)) clearTimeout(holdTimers.get(key));
    holdTimers.set(key, setTimeout(() => {
      const cur = events.get(ev.name);
      if (cur && cur.seats[row][col] === "held") {
        cur.seats[row][col] = "available";
        io.to(roomFor(ev.name)).emit("seat:update", { row, col, status: "available" });
      }
      holdTimers.delete(key);
    }, HOLD_MS));

    io.to(roomFor(ev.name)).emit("seat:update", { row, col, status: "held", expiresAt });
    response.push({ row, col, expiresAt });
  }

  res.json({ ok: true, seats: response, expiresInMs: HOLD_MS });
});

app.post("/events/:name/unhold", auth, requireAdmitted, (req, res) => {
  const ev = req.ev;
  const seats = normalizeSeats(req.body);
  if (seats.length === 0) return res.json({ ok: true });

  for (const { row, col } of seats) {
    if (row < 0 || col < 0 || row >= ev.rows || col >= ev.cols) continue;
    if (ev.seats[row][col] !== "held") continue;

    ev.seats[row][col] = "available";
    const key = holdKey(ev.name, row, col);
    if (holdTimers.has(key)) { clearTimeout(holdTimers.get(key)); holdTimers.delete(key); }
    io.to(roomFor(ev.name)).emit("seat:update", { row, col, status: "available" });
  }
  res.json({ ok: true });
});

app.post("/events/:name/purchase", auth, requireAdmitted, async (req, res) => {
  const ev = req.ev;
  const seats = normalizeSeats(req.body);
  if (seats.length === 0) return res.status(400).json({ error: "invalid seat(s)" });

  for (const { row, col } of seats) {
    if (row < 0 || col < 0 || row >= ev.rows || col >= ev.cols) return res.status(400).json({ error: "invalid seat coords" });
    if (ev.seats[row][col] === "sold") return res.status(409).json({ error: "seat not available" });
  }

  const docs = [];
  for (const { row, col } of seats) {
    ev.seats[row][col] = "sold";
    const key = holdKey(ev.name, row, col);
    if (holdTimers.has(key)) { clearTimeout(holdTimers.get(key)); holdTimers.delete(key); }
    io.to(roomFor(ev.name)).emit("seat:update", { row, col, status: "sold" });

    docs.push({
      userId: req.user.id,
      eventName: ev.name,
      location: ev.location,
      dateISO: ev.dateISO,
      row, col
    });
  }
  try { await Ticket.insertMany(docs); } catch (e) { console.error("ticket save failed", e); }

  if (ev.gated && ev.active.has(req.user.id)) {
    ev.active.delete(req.user.id);
    admitNext(ev);
  }
  res.json({ ok: true, count: seats.length });
});

// sockets
io.on("connection", (socket) => {
  socket.on("join:event", (eventName) => {
    const ev = events.get(eventName);
    if (ev) { ev.popularity += 1; socket.join(roomFor(eventName)); }
  });
});

// ---------- helpers ----------
function summary(e) {
  return {
    name: e.name,
    category: e.category,
    rows: e.rows, cols: e.cols,
    location: e.location,
    dateISO: e.dateISO,
    meta: e.meta
  };
}
function detail(e) {
  return {
    ...summary(e),
    seats: e.seats,
    gated: e.gated
  };
}
const randFrom = (arr) => arr[Math.floor(Math.random()*arr.length)];
const minutes = (n) => n * 60 * 1000;

// ---------- seed demo data ----------
(function seedEvents() {
  if (events.size > 0) return;

  const cities = ['Seattle, WA','Austin, TX','Redmond, WA','San Jose, CA','New York, NY','Chicago, IL','Denver, CO','Portland, OR','Miami, FL','Boston, MA'];
  const genres = ['Pop','Rock','Hip-Hop','EDM','Country','Indie','R&B'];
  const artists = ['Nova Lights','Echo Wave','Violet Horizon','Crimson Beats','Neon Pulse','Stellar Sky','Golden Anthem'];

  function futureISO(daysAheadMin=0, daysAheadMax=60, hourStart=11, hourEnd=22){
    const d = new Date();
    d.setDate(d.getDate() + (daysAheadMin + Math.floor(Math.random()*(daysAheadMax-daysAheadMin+1))));
    d.setHours(hourStart + Math.floor(Math.random()*(hourEnd-hourStart+1)));
    d.setMinutes([0,10,15,20,30,40,45,50][Math.floor(Math.random()*8)]);
    d.setSeconds(0); d.setMilliseconds(0);
    return d.toISOString();
  }

  // Movies
  const movies = ['Starfall', 'Quantum Drift', 'Velvet Shadow', 'Aurora Rising', 'Cascade Run', 'Moonrise City', 'Harbor Lights'];
  for (const title of movies) {
    const startISO = futureISO(0, 45, 11, 21);
    const trailersMin = 20 + Math.floor(Math.random()*11);
    const durationMin  = 95 + Math.floor(Math.random()*66);
    const estMovieStartISO = new Date(new Date(startISO).getTime() + minutes(trailersMin)).toISOString();
    const estEndISO        = new Date(new Date(estMovieStartISO).getTime() + minutes(durationMin)).toISOString();

    const ev = {
      name: `${title} (Movie)`,
      category: "Movies",
      rows: THEATER_ROWS, cols: THEATER_COLS,
      location: randFrom(cities),
      dateISO: startISO,
      seats: makeSeatGrid(THEATER_ROWS, THEATER_COLS),
      queue: [], active: new Set(), maxActive: 10,
      gated: Math.random() < 0.4,
      meta: {
        startISO,
        trailersMin,
        estMovieStartISO,
        durationMin,
        estEndISO
      },
      popularity: Math.floor(Math.random()*80)
    };
    events.set(ev.name, ev);
  }

  // Concerts
  for (let i=0;i<8;i++){
    const artist = randFrom(artists);
    const presaleISO = futureISO(0, 20, 9, 12);
    const generalISO = new Date(new Date(presaleISO).getTime()+minutes(24*60)).toISOString();
    const showISO    = futureISO(10, 60, 18, 22);

    const ev = {
      name: `${artist} Live`,
      category: "Concerts",
      rows: THEATER_ROWS, cols: THEATER_COLS,
      location: randFrom(cities),
      dateISO: showISO,
      seats: makeSeatGrid(THEATER_ROWS, THEATER_COLS),
      queue: [], active: new Set(), maxActive: 10,
      gated: Math.random() < 0.6,
      meta: {
        artist,
        genre: randFrom(genres),
        presaleISO,
        generalSaleISO: generalISO
      },
      popularity: Math.floor(Math.random()*90)
    };
    events.set(ev.name, ev);
  }

  // Conventions
  const convs = ['GameDev Expo','NanoTech Summit','ComicVerse','Data & AI World'];
  for (const c of convs){
    const dISO = futureISO(5, 70, 10, 17);
    events.set(c, {
      name: c,
      category: "Conventions",
      rows: THEATER_ROWS, cols: THEATER_COLS,
      location: randFrom(cities),
      dateISO: dISO,
      seats: makeSeatGrid(THEATER_ROWS, THEATER_COLS),
      queue: [], active: new Set(), maxActive: 10,
      gated: Math.random() < 0.3,
      meta: { days: 3 + Math.floor(Math.random()*3) },
      popularity: Math.floor(Math.random()*65)
    });
  }

  // Festivals
  const fests = ['Riverlight Fest','Sunset Encore','Aurora Fest','Crimson Carnival','Nimbus Night'];
  for (const f of fests){
    const dISO = futureISO(7, 90, 12, 20);
    events.set(f, {
      name: f,
      category: "Festivals",
      rows: THEATER_ROWS, cols: THEATER_COLS,
      location: randFrom(cities),
      dateISO: dISO,
      seats: makeSeatGrid(THEATER_ROWS, THEATER_COLS),
      queue: [], active: new Set(), maxActive: 10,
      gated: Math.random() < 0.5,
      meta: { headliners: [randFrom(artists), randFrom(artists)] },
      popularity: Math.floor(Math.random()*70)
    });
  }

  console.log(`Seeded ${events.size} demo events across categories`);
})();

// start
server.listen(PORT, () => console.log(`backend listening on ${PORT}`));

================================================================================
FILE: frontend/README.md
================================================================================

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

================================================================================
FILE: frontend/eslint.config.js
================================================================================

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])

================================================================================
FILE: frontend/index.html
================================================================================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================================================================================
FILE: frontend/package.json
================================================================================

{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.8.0",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.39.1",
    "vite": "^7.1.2"
  }
}

================================================================================
FILE: frontend/tsconfig.app.json
================================================================================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================================================================================
FILE: frontend/tsconfig.json
================================================================================

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================================================================================
FILE: frontend/tsconfig.node.json
================================================================================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================================================================================
FILE: frontend/vite.config.ts
================================================================================

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  base: process.env.VITE_BASE_PATH || '/',
  plugins: [react()],
  server: {
    proxy: {
      // Primary: client should call /api/*
      '/api': {
        target: 'http://localhost:3000',
        changeOrigin: true,
        rewrite: (p) => p.replace(/^\/api/, ''),
      },

      // Safety net: if any code calls these without /api, still proxy in dev
      '/auth': 'http://localhost:3000',
      '/me': 'http://localhost:3000',
      '/events': 'http://localhost:3000',

      // socket.io
      '/socket.io': { target: 'http://localhost:3000', ws: true },
    },
  },
});

================================================================================
FILE: frontend/public/vite.svg
================================================================================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================================================================================
FILE: frontend/src/App.css
================================================================================

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================================================================================
FILE: frontend/src/App.tsx
================================================================================

import { Link, Route, Routes, useNavigate } from 'react-router-dom';
import Home from './Home';
import EventPage from './EventPage';
import Login from './Login';
import Signup from './Signup';
import Profile from './Profile';
import Charts from './Charts';
import Explore from './Explore';
import { getToken, setToken } from './api';

export default function App(){
  const nav = useNavigate();
  const isAuthed = !!getToken();
  const logout = () => { setToken(''); nav('/'); };

  return (
    <div className="container">
      <header className="hero">
        <div className="nav">
          <h1 className="title" style={{margin:0}}>TicketChart</h1>
          <nav style={{display:'flex', gap:14}}>
            <Link to="/">Home</Link>
            <Link to="/explore">Explore</Link>
            <Link to="/charts">Charts</Link>
            {isAuthed ? <>
              <Link to="/profile">Profile</Link>
              <a href="#" onClick={(e)=>{e.preventDefault(); logout();}}>Logout</a>
            </> : <>
              <Link to="/login">Login</Link>
              <Link to="/signup">Sign up</Link>
            </>}
          </nav>
        </div>
        <p className="subtitle">Live event seating with real-time holds & purchases.</p>
      </header>

      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/explore" element={<Explore />} />
        <Route path="/charts" element={<Charts />} />
        <Route path="/events/:name" element={<EventPage />} />
        <Route path="/login" element={<Login />} />
        <Route path="/signup" element={<Signup />} />
        <Route path="/profile" element={<Profile />} />
      </Routes>
    </div>
  );
}

================================================================================
FILE: frontend/src/Charts.tsx
================================================================================

import { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';

type Item = {
  name:string; category:string; location:string; dateISO:string; popularity:number;
};

const fmt = (iso:string) =>
  new Intl.DateTimeFormat(undefined,{month:'numeric',day:'numeric',hour:'numeric',minute:'2-digit',year:'numeric'}).format(new Date(iso));

export default function Charts(){
  const [items, setItems] = useState<Item[]>([]);
  useEffect(()=>{ fetch('/api/events/trending').then(r=>r.json()).then(d=>setItems(d.trending||[])); },[]);

  return (
    <section className="card">
      <h2>TicketChart — Hottest Right Now</h2>
      <ol className="chart" style={{maxWidth: '920px', margin:'10px auto 0'}}>
        {items.map((t,i)=>(
          <li key={t.name} className={`chart-item ${i<3?'top':''}`}>
            <span className="rank">{i+1}</span>
            <div className="info">
              <div className="title">{t.name}</div>
              <div className="meta">{t.category} · {t.location} · {fmt(t.dateISO)}</div>
            </div>
            <div className="score">{t.popularity}</div>
            <Link className="btn btn-primary small" to={`/events/${encodeURIComponent(t.name)}`}>View event</Link>
          </li>
        ))}
      </ol>
    </section>
  );
}

================================================================================
FILE: frontend/src/EventPage.tsx
================================================================================

import { useEffect, useMemo, useRef, useState } from 'react';
import { useParams } from 'react-router-dom';
import { io, Socket } from 'socket.io-client';
const SOCKET_URL: string = (import.meta as any).env?.VITE_SOCKET_URL || '/';
import { api, getToken } from './api';

type SeatStatus = 'available'|'held'|'sold';
type EventData = {
  name: string; rows: number; cols: number; seats: SeatStatus[][];
  location: string; dateISO: string; gated?: boolean; queueRequired?: boolean;
};
type SeatUpdate = { row:number; col:number; status:SeatStatus; expiresAt?: number; };

const DEFAULT_HOLD_MS = 120_000;

export default function EventPage(){
  const { name = '' } = useParams();
  const [ev, setEv] = useState<EventData | null>(null);
  const [holdExpires, setHoldExpires] = useState<Record<string, number>>({});
  const [nowMs, setNowMs] = useState(Date.now());
  const [queue, setQueue] = useState<{admitted:boolean; position:number; activeCount:number; queueLength:number}>({admitted:false, position:0, activeCount:0, queueLength:0});
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [activeSeat, setActiveSeat] = useState<{r:number;c:number}|null>(null);
  const [form, setForm] = useState({ firstName:'', lastName:'', email:'', phone:'', cardNumber:'', expiry:'', cvc:'' });
  const [errors, setErrors] = useState<any>({});

  const socketRef = useRef<Socket|null>(null);
  const seatKey = (r:number,c:number)=>`${r}-${c}`;

  // Load event
  useEffect(()=>{
    fetch(`/api/events/by-name/${encodeURIComponent(name)}`)
      .then(r=>r.json())
      .then(setEv)
      .catch(console.error);
  }, [name]);

  // Socket
  useEffect(()=>{
    const s = io(SOCKET_URL, { path:'/socket.io', transports:['websocket'] });
    socketRef.current = s;
    s.emit('join:event', name);
    return ()=>{ s.disconnect(); };
  }, [name]);

  // Live seat + queue updates
  useEffect(()=>{
    const s = socketRef.current; if(!s) return;
    const onSeat = (msg: SeatUpdate) => {
      setEv(prev => {
        if(!prev) return prev;
        const copy = structuredClone(prev);
        copy.seats[msg.row][msg.col] = msg.status;
        return copy;
      });
      const key = seatKey(msg.row,msg.col);
      if (msg.status==='held'){
        setHoldExpires(prev => ({...prev, [key]: typeof msg.expiresAt==='number'? msg.expiresAt : Date.now()+DEFAULT_HOLD_MS}));
      } else {
        setHoldExpires(prev => { const { [key]:_, ...rest } = prev; return rest; });
      }
      if (activeSeat && activeSeat.r===msg.row && activeSeat.c===msg.col && msg.status!=='held'){
        setIsModalOpen(false); setActiveSeat(null);
      }
    };
    const onQ = (m:any)=> setQueue(q=>({...q, ...m}));
    s.on('seat:update', onSeat);
    s.on('queue:update', onQ);
    return ()=>{ s.off('seat:update', onSeat); s.off('queue:update', onQ); };
  }, [activeSeat]);

  // countdown tick
  useEffect(()=>{ const t=setInterval(()=>setNowMs(Date.now()), 1000); return ()=>clearInterval(t); }, []);

  const seatClass = useMemo(()=> (status:SeatStatus)=>`seat ${status}`, []);

  // --- Queue join/poll if logged in ---
  useEffect(()=>{
    let stop = false;
    async function loop(){
      if(!getToken()) return;
      try{ await api(`/queue/${encodeURIComponent(name)}/join`, { method:'POST' }); }catch{}
      while(!stop){
        try{
          const s = await api(`/queue/${encodeURIComponent(name)}/status`);
          setQueue(s);
        }catch{}
        await new Promise(r=>setTimeout(r, 2000));
      }
    }
    loop();
    return ()=>{ stop = true; if(getToken()) api(`/queue/${encodeURIComponent(name)}/leave`, { method:'POST' }).catch(()=>{}); };
  }, [name]);

  // Hold / Unhold / Purchase
  async function holdNow(r:number,c:number){
    const res = await api(`/events/${encodeURIComponent(name)}/hold`, { method:'POST', body: JSON.stringify({ row:r, col:c }) });
    const expiresAt = (res?.expiresAt && typeof res.expiresAt==='number') ? res.expiresAt : Date.now()+DEFAULT_HOLD_MS;
    setHoldExpires(prev=>({ ...prev, [seatKey(r,c)]: expiresAt }));
  }
  async function unholdNow(r:number,c:number){
    try{ await api(`/events/${encodeURIComponent(name)}/unhold`, { method:'POST', body: JSON.stringify({ row:r, col:c }) }); }catch{}
  }
  async function purchase(r:number,c:number){
    await api(`/events/${encodeURIComponent(name)}/purchase`, { method:'POST', body: JSON.stringify({ row:r, col:c }) });
  }

  function fmt(ms:number){ const s=Math.max(0,Math.floor(ms/1000)); const m=Math.floor(s/60); const ss=String(s%60).padStart(2,'0'); return `${m}:${ss}`; }

  async function onSeatClick(r:number,c:number,status:SeatStatus){
    if(status!=='available' || !queue.admitted){ return; }
    setActiveSeat({r,c}); setErrors({}); setIsModalOpen(true);
    await holdNow(r,c);
  }

  // validators
  const luhn=(num:string)=>{ const d=num.replace(/\D/g,''); let sum=0,alt=false; for(let i=d.length-1;i>=0;i--){ let n=+d[i]; if(alt){ n*=2; if(n>9) n-=9; } sum+=n; alt=!alt; } return d.length>=13&&d.length<=19&&sum%10===0; };
  const validEmail=(e:string)=>/^\S+@\S+\.\S+$/.test(e.trim());
  const validPhone=(p:string)=>p.replace(/\D/g,'').length>=10;
  const validExpiry=(exp:string)=>{ const m=exp.trim(); const m1=/^(\d{2})\s*\/\s*(\d{2})$/, m2=/^(\d{2})\s*\/\s*(\d{4})$/; let mm=0,yy=0; if(m1.test(m)){const[,a,b]=m.match(m1)!; mm=+a; yy=2000+ +b;} else if(m2.test(m)){const[,a,b]=m.match(m2)!; mm=+a; yy=+b;} else return false; if(mm<1||mm>12)return false; const d=new Date(yy,mm,0); d.setHours(23,59,59,999); return d.getTime()>=Date.now(); };

  function validate(){
    const e:any={};
    if(!form.firstName.trim()) e.firstName='Required';
    if(!form.lastName.trim()) e.lastName='Required';
    if(!validEmail(form.email)) e.email='Invalid email';
    if(!validPhone(form.phone)) e.phone='Invalid phone';
    if(!luhn(form.cardNumber)) e.cardNumber='Invalid card';
    if(!validExpiry(form.expiry)) e.expiry='Invalid/expired';
    if(!/^\d{3,4}$/.test(form.cvc.trim())) e.cvc='3–4 digits';
    setErrors(e);
    return Object.keys(e).length===0;
  }

  async function closeModal(){
    if(activeSeat) await unholdNow(activeSeat.r, activeSeat.c);
    setIsModalOpen(false); setActiveSeat(null);
  }
  async function saveKeep(){ if(!validate())return; setIsModalOpen(false); setActiveSeat(null); }
  async function buyNow(){ if(!validate() || !activeSeat) return; await purchase(activeSeat.r, activeSeat.c); setIsModalOpen(false); setActiveSeat(null); }

  if(!ev) return <section className="card"><h2>Loading event…</h2></section>;

  // Use server's 'gated' (or legacy queueRequired) to decide
  const requiresQueue = (ev as any).gated ?? (ev as any).queueRequired ?? false;
  const showQueueScreen = requiresQueue && (!queue.admitted || !getToken());

  const date = new Date(ev.dateISO);
  const dateStr = date.toLocaleDateString();
  const timeStr = date.toLocaleTimeString([], { hour:'numeric', minute:'2-digit' });

  return (
    <>
      <section className="card" style={{marginBottom:16}}>
        <h2 style={{marginBottom:8}}>{ev.name}</h2>
        <div className="event-meta">{ev.location} · {dateStr} {timeStr}</div>
        <div style={{marginTop:8, color:'#9aa3b2'}}>
          {requiresQueue ? (
            getToken()
              ? (queue.admitted
                  ? <span>You’re <b>ADMITTED</b> to buy (active: {queue.activeCount}).</span>
                  : <span>You're currently in the queue… <b>{queue.position || 'waiting'}</b> people ahead.</span>)
              : <span><b>Log in</b> to join the queue for this event.</span>
          ) : <span>No queue for this event.</span>}
        </div>
      </section>

      {showQueueScreen ? (
        <section className="card" style={{padding:28, textAlign:'center'}}>
          <h3>You're currently in the queue…</h3>
          <p className="subtitle">{queue.position || 'Waiting'} people ahead.</p>
        </section>
      ) : (
        <section className="card seat-card">
          <div className="center" style={{marginBottom:12, color:'var(--muted)', letterSpacing:2}}>
            — SCREEN THIS SIDE —
          </div>
          <div style={{display:'grid', placeItems:'center'}}>
            <div className="seat-grid" role="grid" aria-label="Seat map" aria-rowcount={ev.rows} aria-colcount={ev.cols}
                 style={{display:'grid', gridTemplateColumns:`repeat(${ev.cols}, 36px)`, gridAutoRows:'36px', gap:'8px', justifyContent:'center'}}>
              {ev.seats.map((row, r) =>
                row.map((status, c) => {
                  const key = seatKey(r,c);
                  const exp = holdExpires[key];
                  const ms = status==='held' && typeof exp==='number' ? exp - nowMs : 0;
                  const show = status==='held' && ms>0;
                  return (
                    <button
                      key={`${r}-${c}`}
                      aria-label={`Row ${r+1} Seat ${c+1} ${status}`}
                      className={seatClass(status)}
                      onClick={() => onSeatClick(r,c,status)}
                      title={`Row ${r+1} Seat ${c+1} — ${status}${show?` (${fmt(ms)} remaining)`:''}`}
                      style={{width:36, height:36}}
                    >
                      {show ? <span className="countdown">{fmt(ms)}</span> : c+1}
                    </button>
                  );
                })
              )}
            </div>
          </div>
          <div className="legend" style={{marginTop:12, justifyContent:'center', display:'flex', gap:10}}>
            <span className="pill available">available</span>
            <span className="pill held">held</span>
            <span className="pill sold">sold</span>
          </div>
        </section>
      )}

      {isModalOpen && activeSeat && (
        <div className="modal-backdrop" onClick={(e)=>{ if(e.target===e.currentTarget) closeModal(); }}>
          <div className="modal panel-strong" onClick={e=>e.stopPropagation()} role="dialog" aria-modal="true" aria-labelledby="payTitle">
            <h3 id="payTitle">Seat held – Row {activeSeat.r+1}, Seat {activeSeat.c+1}</h3>
            <p className="hint">Demo only — do not enter real payment info.</p>
            <div className="modal-grid">
              <div><label htmlFor="fn">First name</label><input id="fn" value={form.firstName} onChange={e=>setForm({...form, firstName:e.target.value})} /></div>
              <div><label htmlFor="ln">Last name</label><input id="ln" value={form.lastName} onChange={e=>setForm({...form, lastName:e.target.value})} /></div>
              <div><label htmlFor="em">Email</label><input id="em" value={form.email} onChange={e=>setForm({...form, email:e.target.value})} /></div>
              <div><label htmlFor="ph">Phone</label><input id="ph" value={form.phone} onChange={e=>setForm({...form, phone:e.target.value})} placeholder="(555) 123-4567" /></div>
              <div className="full"><label htmlFor="cc">Card number</label><input id="cc" value={form.cardNumber} onChange={e=>setForm({...form, cardNumber:e.target.value})} placeholder="4242 4242 4242 4242" /></div>
              <div><label htmlFor="ex">Expiry (MM/YY)</label><input id="ex" value={form.expiry} onChange={e=>setForm({...form, expiry:e.target.value})} placeholder="12/27" /></div>
              <div><label htmlFor="cvc">CVC</label><input id="cvc" value={form.cvc} onChange={e=>setForm({...form, cvc:e.target.value})} placeholder="123" /></div>
            </div>
            <div style={{ color:'crimson', fontSize:12, marginTop: 6 }}>
              {Object.values(errors).length > 0 && 'Please fix the highlighted fields.'}
            </div>
            <div className="modal-actions">
              <button className="btn" onClick={closeModal}>Cancel</button>
              <button className="btn" onClick={saveKeep}>Save & Keep Held</button>
              <button className="btn btn-primary" onClick={buyNow}>Purchase Now</button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

================================================================================
FILE: frontend/src/Explore.tsx
================================================================================

import { useEffect, useMemo, useState } from 'react';
import { Link, useSearchParams } from 'react-router-dom';

type Meta = Record<string, any>;
type EventLite = { name:string; category:string; rows:number; cols:number; location:string; dateISO:string; meta:Meta };

const fmtDate = (iso:string) =>
  new Intl.DateTimeFormat(undefined,{year:'numeric',month:'numeric',day:'numeric',hour:'numeric',minute:'2-digit'}).format(new Date(iso));

export default function Explore(){
  const [params, setParams] = useSearchParams();
  const [all, setAll] = useState<EventLite[]>([]);
  const [q, setQ] = useState(params.get('q') || '');
  const [cat, setCat] = useState(params.get('cat') || 'All');
  const [city, setCity] = useState(params.get('city') || '');
  const [from, setFrom] = useState(params.get('from') || '');
  const [to, setTo] = useState(params.get('to') || '');

  useEffect(()=>{ fetch('/api/events').then(r=>r.json()).then(setAll).catch(console.error); },[]);

  const cats = useMemo(()=>['All', ...Array.from(new Set(all.map(e=>e.category)))], [all]);

  const results = useMemo(()=>{
    return all.filter(e=>{
      if (cat !== 'All' && e.category !== cat) return false;
      const hay = `${e.name} ${e.location}`.toLowerCase();
      if (q && !hay.includes(q.toLowerCase())) return false;
      if (city && !e.location.toLowerCase().includes(city.toLowerCase())) return false;
      const t = new Date(e.dateISO).getTime();
      if (from && t < new Date(from).getTime()) return false;
      if (to && t > new Date(to).getTime()) return false;
      return true;
    }).sort((a,b)=> new Date(a.dateISO).getTime() - new Date(b.dateISO).getTime());
  }, [all,q,cat,city,from,to]);

  function runSearch(){
    const next = new URLSearchParams();
    if (q) next.set('q', q);
    if (cat && cat!=='All') next.set('cat', cat);
    if (city) next.set('city', city);
    if (from) next.set('from', from);
    if (to) next.set('to', to);
    setParams(next);
  }

  return (
    <>
      <section className="card" style={{marginBottom:16}}>
        <h2>Explore upcoming</h2>

        <div className="form-row" style={{marginTop:8}}>
          <div style={{flex:2}}>
            <label>Search by name or city</label>
            <input value={q} onChange={e=>setQ(e.target.value)} placeholder="e.g., Nova Lights, Chicago" />
          </div>
          <button className="btn" onClick={runSearch}>Search</button>
        </div>

        <div className="form-row" style={{marginTop:8}}>
          <div style={{flex:1}}>
            <label>Category</label>
            <select className="select" value={cat} onChange={e=>setCat(e.target.value)}>
              {cats.map(c => <option key={c} value={c}>{c}</option>)}
            </select>
          </div>
          <div style={{flex:1}}>
            <label>City</label>
            <input value={city} onChange={e=>setCity(e.target.value)} placeholder="City or state" />
          </div>
          <div style={{flex:1}}>
            <label>From</label>
            <input type="date" value={from} onChange={e=>setFrom(e.target.value)} />
          </div>
          <div style={{flex:1}}>
            <label>To</label>
            <input type="date" value={to} onChange={e=>setTo(e.target.value)} />
          </div>
        </div>
      </section>

      <section className="card">
        {results.length === 0 ? <p className="subtitle">No matches yet.</p> :
          <div className="grid">
            {results.map(ev=>(
              <article key={ev.name} className="card event-card">
                <h3>{ev.name}</h3>
                <div className="event-meta">{ev.category} · {ev.location} · {fmtDate(ev.dateISO)}</div>
                <div style={{marginTop:10}}>
                  <Link className="btn btn-primary small" to={`/events/${encodeURIComponent(ev.name)}`}>View event</Link>
                </div>
              </article>
            ))}
          </div>}
      </section>
    </>
  );
}

================================================================================
FILE: frontend/src/Home.tsx
================================================================================

import { useEffect, useMemo, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';

type Meta = Record<string, any>;
type EventLite = { name: string; category: string; rows: number; cols: number; location: string; dateISO: string; meta: Meta };
type ByCategory = Record<string, EventLite[]>;
type TrendingItem = EventLite & { popularity: number };

const fmtDate = (iso:string) =>
  new Intl.DateTimeFormat(undefined,{year:'numeric',month:'numeric',day:'numeric',hour:'numeric',minute:'2-digit'}).format(new Date(iso));
const fmtHM = (mins:number) => `${Math.floor(mins/60)}:${String(mins%60).padStart(2,'0')}`;

export default function Home(){
  const [byCat, setByCat] = useState<ByCategory>({});
  const [trending, setTrending] = useState<TrendingItem[]>([]);
  const [q, setQ] = useState('');
  const nav = useNavigate();

  useEffect(() => {
    fetch('/api/events/overview').then(r=>r.json()).then(d=>setByCat(d.byCategory||{})).catch(console.error);
    fetch('/api/events/trending').then(r=>r.json()).then(d=>setTrending(d.trending||[])).catch(console.error);
  }, []);

  function searchGo(){
    const params = new URLSearchParams();
    if (q.trim()) params.set('q', q.trim());
    nav(`/explore?${params.toString()}`);
  }

  return (
    <>
      {/* Search at the top */}
      <section className="card" style={{marginBottom:16}}>
        <h2>Find your next night out</h2>
        <div className="form-row">
          <div style={{flex:1}}>
            <label>Artist, movie, event or city</label>
            <input value={q} onChange={e=>setQ(e.target.value)} placeholder="e.g., Nova Lights, Chicago" />
          </div>
          <button className="btn" onClick={searchGo}>Search</button>
        </div>
        <div style={{display:'flex', gap:10, marginTop:12}}>
          {['Concerts','Movies','Festivals','Conventions'].map(c =>
            <button key={c} className="btn small" onClick={()=>nav(`/explore?cat=${encodeURIComponent(c)}`)}>{c}</button>
          )}
        </div>
      </section>

      {/* Leaderboard (compact) */}
      <section className="card" style={{marginBottom:16}}>
        <h2>TicketChart — Hottest Right Now</h2>
        <ol className="chart">
          {trending.map((t,i)=>(
            <li key={t.name} className={`chart-item ${i<3?'top':''}`}>
              <span className="rank">{i+1}</span>
              <div className="info">
                <div className="title">{t.name}</div>
                <div className="meta">{t.category} · {t.location} · {fmtDate(t.dateISO)}</div>
              </div>
              <div className="score">{t.popularity}</div>
              <Link className="btn btn-primary small" to={`/events/${encodeURIComponent(t.name)}`}>View event</Link>
            </li>
          ))}
        </ol>
      </section>

      {/* Category sections */}
      {Object.entries(byCat).map(([cat, list])=>(
        <section className="card" key={cat} style={{marginBottom:16}}>
          <div style={{display:'flex', justifyContent:'space-between', alignItems:'center'}}>
            <h2>{cat}</h2>
            <button className="btn small" onClick={()=>nav(`/explore?cat=${encodeURIComponent(cat)}`)}>See all</button>
          </div>
          <div className="grid">
            {list.map(ev=>(
              <article key={ev.name} className="card event-card">
                <h3>{ev.name}</h3>
                <div className="event-meta">{ev.location} · {fmtDate(ev.dateISO)}</div>
                {ev.category === 'Movies' && (
                  <div className="cat-meta">
                    <div><b>Trailers start:</b> {fmtDate(ev.meta.startISO)}</div>
                    <div><b>Est. movie start:</b> {fmtDate(ev.meta.estMovieStartISO)}</div>
                    <div><b>Duration:</b> {fmtHM(ev.meta.durationMin)}</div>
                    <div><b>Est. end:</b> {fmtDate(ev.meta.estEndISO)}</div>
                  </div>
                )}
                {ev.category === 'Concerts' && (
                  <div className="cat-meta">
                    <div><b>Artist:</b> {ev.meta.artist}</div>
                    <div><b>Genre:</b> {ev.meta.genre}</div>
                    <div><b>Pre-sale:</b> {fmtDate(ev.meta.presaleISO)}</div>
                    <div><b>General sale:</b> {fmtDate(ev.meta.generalSaleISO)}</div>
                  </div>
                )}
                <div style={{marginTop:10}}>
                  <Link className="btn btn-primary small" to={`/events/${encodeURIComponent(ev.name)}`}>View event</Link>
                </div>
              </article>
            ))}
          </div>
        </section>
      ))}
    </>
  );
}

================================================================================
FILE: frontend/src/Login.tsx
================================================================================

import { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { api, setToken } from './api';

export default function Login(){
  const nav = useNavigate();
  const [email, setEmail] = useState(''); 
  const [password, setPassword] = useState(''); 
  const [err,setErr]=useState('');

  async function submit(){
    setErr('');
    try{
      const { token } = await api('/auth/login', { method:'POST', body: JSON.stringify({ email, password }) });
      setToken(token); nav('/'); 
    }catch(_){
      try{
        const r = await fetch('/api/auth/login', {
          method:'POST',
          headers: { 'Content-Type':'application/json' },
          body: JSON.stringify({ email, password })
        });
        if(!r.ok){
          const msg = await r.text();
          throw new Error(msg || 'login failed');
        }
        const { token } = await r.json();
        setToken(token); nav('/');
      }catch(e2:any){
        setErr(e2?.message || 'login failed');
      }
    }
  }

  return (
    <section className="card">
      <h2>Login</h2>
      <div className="form-grid">
        <div><label>Email</label><input value={email} onChange={e=>setEmail(e.target.value)} /></div>
        <div><label>Password</label><input type="password" value={password} onChange={e=>setPassword(e.target.value)} /></div>
      </div>
      {err && <div style={{color:'crimson',marginTop:8}}>{err}</div>}
      <div style={{marginTop:12}}><button className="btn btn-primary" onClick={submit}>Login</button></div>
      <p className="subtitle" style={{marginTop:8}}>No account? <Link to="/signup">Sign up</Link></p>
    </section>
  );
}

================================================================================
FILE: frontend/src/Profile.tsx
================================================================================

import { useEffect, useState } from 'react';
import { api, getToken } from './api';

type Ticket = { eventName:string; location:string; dateISO:string; row:number; col:number; purchasedAt:string };
type Me = { user?: { firstName?:string; lastName?:string; email?:string; phone?:string }, tickets: Ticket[] };

export default function Profile(){
  const [data, setData] = useState<Me>({ tickets: [] });
  const [showExpired, setShowExpired] = useState(false);

  useEffect(()=>{ if(getToken()) api('/me').then(setData).catch(console.error); },[]);
  if(!getToken()) return <section className="card"><h2>Please log in</h2></section>;

  const now = Date.now();
  const byEvent = new Map<string, Ticket[]>();
  const expired: Ticket[] = [];

  for (const t of data.tickets || []) {
    const isPast = new Date(t.dateISO).getTime() < now;
    if (isPast) { expired.push(t); continue; }
    if (!byEvent.has(t.eventName)) byEvent.set(t.eventName, []);
    byEvent.get(t.eventName)!.push(t);
  }

  return (
    <div className="container">
      {/* Profile info panel */}
      <section className="card" style={{padding:18, marginBottom:16}}>
        <h2 style={{marginTop:0}}>Profile</h2>
        {data.user && (
          <div className="subtitle">
            {data.user.firstName} {data.user.lastName} · {data.user.email}{data.user.phone ? ` · ${data.user.phone}` : ''}
          </div>
        )}
      </section>

      {/* Active tickets grouped by event */}
      <section className="card" style={{padding:18, marginBottom:16}}>
        <h3>Your Tickets</h3>
        {Array.from(byEvent.entries()).map(([eventName, list]) => {
          const d = new Date(list[0].dateISO);
          const dateStr = d.toLocaleDateString();
          const timeStr = d.toLocaleTimeString([], {hour:'numeric', minute:'2-digit'});
          return (
            <div key={eventName} className="card" style={{marginBottom:12}}>
              <h4 style={{margin:'8px 0'}}>{eventName}</h4>
              <table style={{width:'100%', borderCollapse:'collapse'}}>
                <thead>
                  <tr className="subtitle">
                    <th style={{textAlign:'left'}}>Location</th>
                    <th style={{textAlign:'left'}}>Date</th>
                    <th style={{textAlign:'left'}}>Seats</th>
                    <th style={{textAlign:'left'}}>Purchased</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>{list[0].location}</td>
                    <td>{dateStr} {timeStr}</td>
                    <td>{list.map(s => `R${s.row+1}-C${s.col+1}`).join(', ')}</td>
                    <td>{list.map(s => new Date(s.purchasedAt).toLocaleString()).join(' | ')}</td>
                  </tr>
                </tbody>
              </table>
            </div>
          );
        })}
        {byEvent.size === 0 && <p className="subtitle">No active tickets yet.</p>}
      </section>

      {/* Expired tickets dropdown */}
      <section className="card" style={{padding:18}}>
        <div style={{display:'flex', justifyContent:'space-between', alignItems:'center'}}>
          <h3 style={{margin:0}}>Expired tickets</h3>
          <button className="btn" onClick={()=>setShowExpired(!showExpired)}>{showExpired ? 'Hide' : 'Show'}</button>
        </div>
        {showExpired && (
          <div style={{marginTop:12}}>
            {expired.length === 0 ? <p className="subtitle">None</p> :
              <table style={{width:'100%', borderCollapse:'collapse'}}>
                <thead>
                  <tr className="subtitle">
                    <th align="left">Event</th>
                    <th align="left">Location</th>
                    <th align="left">Date</th>
                    <th align="left">Seat</th>
                    <th align="left">Purchased</th>
                  </tr>
                </thead>
                <tbody>
                  {expired.map((t,i)=>{
                    const d = new Date(t.dateISO);
                    return (
                      <tr key={i}>
                        <td>{t.eventName}</td>
                        <td>{t.location}</td>
                        <td>{d.toLocaleDateString()} {d.toLocaleTimeString([], {hour:'numeric', minute:'2-digit'})}</td>
                        <td>R{t.row+1}-C{t.col+1}</td>
                        <td>{new Date(t.purchasedAt).toLocaleString()}</td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>}
          </div>
        )}
      </section>
    </div>
  );
}

================================================================================
FILE: frontend/src/Signup.tsx
================================================================================

import { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { api, setToken } from './api';

export default function Signup(){
  const nav = useNavigate();
  const [form, setForm] = useState({firstName:'', lastName:'', email:'', phone:'', password:''});
  const [err,setErr]=useState('');
  const [loading, setLoading] = useState(false);

  async function submit(){
    setErr('');
    if (loading) return;
    setLoading(true);
    try{
      // Preferred path (uses /api → works in dev+prod thanks to server prefix-strip)
      const { token } = await api('/auth/signup', { method:'POST', json: form });
      setToken(token);
      nav('/');
    }catch(primary:any){
      // Defensive fallback: if someone hits /auth directly in dev, proxy now handles it;
      // but keep a direct fetch to be extra resilient.
      try{
        const r = await fetch('/auth/signup', {
          method:'POST',
          headers: { 'Content-Type':'application/json' },
          body: JSON.stringify(form),
        });
        if(!r.ok){
          const txt = await r.text();
          throw new Error(txt || r.statusText);
        }
        const { token } = await r.json();
        if (!token) throw new Error('No token returned');
        setToken(token);
        nav('/');
      }catch(secondary:any){
        setErr(secondary?.message || primary?.message || 'Signup failed');
      }
    }finally{
      setLoading(false);
    }
  }

  return (
    <section className="card">
      <h2>Create an account</h2>
      <div className="form-grid">
        <div><label>First name</label><input value={form.firstName} onChange={e=>setForm({...form, firstName:e.target.value})} /></div>
        <div><label>Last name</label><input value={form.lastName} onChange={e=>setForm({...form, lastName:e.target.value})} /></div>
        <div><label>Email</label><input value={form.email} onChange={e=>setForm({...form, email:e.target.value})} /></div>
        <div><label>Phone</label><input value={form.phone} onChange={e=>setForm({...form, phone:e.target.value})} /></div>
        <div className="full"><label>Password</label><input type="password" value={form.password} onChange={e=>setForm({...form, password:e.target.value})} /></div>
      </div>
      {err && <div style={{color:'crimson',marginTop:8, whiteSpace:'pre-wrap'}}>{err}</div>}
      <div style={{marginTop:12}}>
        <button className="btn btn-primary" disabled={loading} onClick={submit}>
          {loading ? 'Signing up…' : 'Sign up'}
        </button>
      </div>
      <p className="subtitle" style={{marginTop:8}}>Already have an account? <Link to="/login">Log in</Link></p>
    </section>
  );
}

================================================================================
FILE: frontend/src/api.ts
================================================================================

// Small helper that always talks to the backend via the Vite proxy (/api → :3000)
const API_BASE: string = (import.meta as any).env?.VITE_API_BASE || '/api';

const TOKEN_KEY = 'tickets.token';
export const getToken = () => localStorage.getItem(TOKEN_KEY) || '';
export const setToken = (t: string) => {
  if (!t) localStorage.removeItem(TOKEN_KEY);
  else localStorage.setItem(TOKEN_KEY, t);
};

type Opts = RequestInit & { json?: any };

export async function api(path: string, opts: Opts = {}) {
  const headers: Record<string, string> = {
    'Content-Type': 'application/json',
    ...(opts.headers as Record<string, string> || {}),
  };
  const token = getToken();
  if (token) headers.Authorization = `Bearer ${token}`;

  const body =
    opts.body ?? (opts.json !== undefined ? JSON.stringify(opts.json) : undefined);

  const res = await fetch(`${API_BASE}${path}`, { ...opts, headers, body });

  // Try JSON first; if not JSON, surface text (useful for 4xx from server)
  const text = await res.text();
  let data: any;
  try { data = text ? JSON.parse(text) : {}; } catch { data = { message: text }; }

  if (!res.ok) throw new Error(data?.error || data?.message || res.statusText);
  return data;
}

================================================================================
FILE: frontend/src/index.css
================================================================================

:root{
  --bg: #0a0f22; --bg2: #0b1228; --text: #e8ecf7; --muted: #9aa3b2;
  --surface: #101727; --surface-2: #0e1526; --stroke: rgba(255,255,255,0.08);
  --shadow: 0 10px 30px rgba(0,0,0,.50);
  --primary: #7c5cff; --primary-600: #6a4af6; --primary-700: #5b3fe5;
  --success: #22c55e; --warn: #f59e0b; --sold: #94a3b8;
}

*{ box-sizing:border-box; }
html,body,#root{ height:100%; }
body{
  margin:0; font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Inter, Roboto, Arial, sans-serif;
  color: var(--text);
  background:
    radial-gradient(1300px 800px at 0% -10%, rgba(124,92,255,.25), transparent 60%),
    radial-gradient(1200px 900px at 100% -10%, rgba(34,197,94,.15), transparent 60%),
    linear-gradient(180deg, var(--bg), var(--bg2));
  /* Prevent banding/repeat line on scroll */
  background-attachment: fixed;
}

.container{ max-width: 1200px; margin: 0 auto; padding: 32px 20px 64px; }
.hero{ padding: 28px 20px 8px; }
.title{ font-size: clamp(28px,3vw,40px); font-weight: 800; letter-spacing:-.02em; margin:0 0 6px; }
.subtitle{ margin:0; color: var(--muted); }

.card{
  /* Stronger surface contrast */
  background: linear-gradient(180deg, #121a2e, #0f1628);
  border: 1px solid var(--stroke);
  border-radius:16px; padding:16px; box-shadow: var(--shadow);
}
.card h2{ margin:0 0 12px; font-size:18px; }
.mutedrow{ color:var(--muted); }

/* Forms */
.form-grid{ display:grid; grid-template-columns:1fr 1fr; gap:10px 12px; }
.form-row{ display:flex; gap:12px; align-items:end; flex-wrap:wrap; }
label{ display:block; font-size:13px; color:var(--muted); margin-bottom:6px; }
input, select{
  width:100%; background:#0b1324; color:var(--text); padding:10px 12px; border-radius:10px; border:1px solid var(--stroke);
}
input:focus, select:focus{ border-color: rgba(124,92,255,.7); box-shadow: 0 0 0 4px rgba(124,92,255,.12); outline:none; }

/* Buttons */
.btn{
  appearance:none; border:1px solid var(--stroke); background:#18213a; color:var(--text);
  padding:10px 14px; border-radius:12px; cursor:pointer; transition: transform .08s, background .15s, border-color .15s;
}
.btn.small{ padding:8px 12px; border-radius:10px; font-size:14px; }
.btn:hover{ transform: translateY(-1px); }
.btn-primary{ background: linear-gradient(180deg, var(--primary), var(--primary-700)); border-color:transparent; }
.btn-primary:hover{ background: linear-gradient(180deg, var(--primary-600), var(--primary-700)); }

/* Legend */
.legend{ display:flex; gap:10px; margin-top:10px; justify-content:center; }
.pill{ padding:3px 10px; border-radius:999px; border:1px solid var(--stroke); font-size:12px; }
.pill.available{ background: rgba(34,197,94,.20); color:#c8f5d4; }
.pill.held{ background: rgba(245,158,11,.28); color:#ffe0a3; }
.pill.sold{ background: rgba(148,163,184,.6); color:#eef2f7; }

/* Seat map */
.seat-card{ text-align:center; }
.screen-label{ color:#b8c0d6; opacity:.8; letter-spacing:.2em; margin:6px 0 8px; }
.seat-grid{ display:flex; flex-direction:column; gap:8px; padding:10px; border-radius:12px; align-items:center; }
.seat-row{ display:flex; gap:8px; }
.seat{
  width:36px; height:36px; border-radius:10px; display:inline-flex; align-items:center; justify-content:center;
  font-size:12px; font-weight:700; border:1px solid var(--stroke);
  transition: transform .08s, box-shadow .15s, background .15s, border-color .15s;
  user-select:none; cursor:pointer; box-shadow: 0 1px 0 rgba(255,255,255,.04) inset, 0 6px 16px rgba(0,0,0,.25);
  color:#d6def0;
}
.seat:hover{ transform: translateY(-1px); }
.seat.available{ background: #1a2341; }
.seat.available:hover{ background: #213056; }
.seat.held{ background: rgba(245,158,11,.28); }
.seat.sold{ background: rgba(148,163,184,.55); cursor:not-allowed; }
.seat.selected{ outline: 2px solid #8f7cff; background:#2a3664; }
.countdown{ font-size:10px; font-weight:700; }

/* Event cards & grids */
.grid{ display:grid; grid-template-columns: repeat(3, 1fr); gap:16px; }
@media (max-width:980px){ .grid{ grid-template-columns: 1fr; } }
.event-card h3{ margin:8px 0 4px; }
.event-meta{ color:var(--muted); font-size:13px; }
.cat-meta{ margin-top:8px; display:grid; grid-template-columns: 1fr 1fr; gap:6px; font-size:13px; color:#cdd6f4; }
@media (max-width:980px){ .cat-meta{ grid-template-columns: 1fr; } }

/* Modal – higher contrast for accessibility */
.modal-backdrop{ position:fixed; inset:0; background: rgba(8,12,24,.7); backdrop-filter: blur(6px);
  display:flex; align-items:center; justify-content:center; z-index:1000; }
.modal{
  width:600px; max-width:92%;
  background: #0f1729;
  border:2px solid rgba(140, 160, 255, .25);
  border-radius:16px; box-shadow: 0 20px 60px rgba(0,0,0,.6); padding:18px;
}
.modal h3{ margin:0 0 6px; }
.modal p.hint{ margin:0 0 12px; color:#c0c8dc; }
.modal-grid{ display:grid; grid-template-columns:1fr 1fr; gap:12px; }
.modal-grid .full{ grid-column:1 / -1; }
.modal-actions{ display:flex; gap:10px; justify-content:flex-end; margin-top:12px; }
.errorsline{ color:#ff5d7a; font-size:12px; margin-top:6px; }

/* Nav */
.nav{ display:flex; align-items:center; justify-content:space-between; gap:12px; padding:12px 0; }
.nav a{ color:var(--text); text-decoration:none; opacity:.9; }
.nav a:hover{ opacity:1; }

/* Profile tickets */
.ticket-list{ display:flex; flex-direction:column; gap:16px; }
.ticket-group{ border:1px solid var(--stroke); border-radius:14px; padding:14px; background:#0e162a; }
.tg-title{ font-weight:700; margin-bottom:8px; font-size:16px; }
.tg-grid{ display:grid; grid-template-columns: 1fr 1fr 1fr 1fr; gap:12px; }
.tg-label{ font-size:12px; color:#9aa3b2; margin-bottom:4px; }
.seat-list{ display:flex; flex-direction:column; gap:4px; }
.exp-header{ display:flex; align-items:center; justify-content:space-between; }

/* Leaderboard (Charts) */
.chart{ list-style:none; margin:0; padding:0; display:flex; flex-direction:column; gap:10px; max-width: 920px; margin-left:auto; margin-right:auto; }
.chart-item{
  display:grid; grid-template-columns: 44px 1fr auto auto; align-items:center; gap:12px;
  background:#0e162a; border:1px solid var(--stroke); border-radius:12px; padding:10px 12px;
}
.chart-item.top{ border-color: rgba(124,92,255,.6); background: linear-gradient(180deg,#141d37,#111a31); box-shadow: 0 8px 26px rgba(124,92,255,.18); }
.chart-item .rank{
  width:36px; height:36px; border-radius:999px; display:flex; align-items:center; justify-content:center;
  font-weight:800; background:#1a2341;
}
.chart-item.top .rank{ background: #7c5cff; color:white; }
.chart-item .title{ font-weight:700; }
.chart-item .meta{ color:var(--muted); font-size:13px; }
.chart-item .score{ font-variant-numeric: tabular-nums; opacity:.9; margin-right:8px; }

================================================================================
FILE: frontend/src/main.tsx
================================================================================

import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter, HashRouter } from 'react-router-dom';
const UseHash = ((import.meta as any).env?.VITE_USE_HASH_ROUTER === 'true');
const Router = UseHash ? HashRouter : BrowserRouter;
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <Router>
      <App />
    </Router>
  </React.StrictMode>
);

================================================================================
FILE: frontend/src/vite-env.d.ts
================================================================================

/// <reference types="vite/client" />

================================================================================
FILE: frontend/src/assets/react.svg
================================================================================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================================================================================
FILE: k8s/00-namespace.yaml
================================================================================

apiVersion: v1
kind: Namespace
metadata:
  name: tickets

================================================================================
FILE: k8s/10-redis.yaml
================================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: tickets
spec:
  replicas: 1
  selector:
    matchLabels: { app: redis }
  template:
    metadata:
      labels: { app: redis }
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: tickets
spec:
  selector: { app: redis }
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
  type: ClusterIP

================================================================================
FILE: k8s/15-mongodb.yaml
================================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: tickets
spec:
  replicas: 1
  selector:
    matchLabels: { app: mongodb }
  template:
    metadata:
      labels: { app: mongodb }
    spec:
      containers:
        - name: mongodb
          image: mongo:7
          args: ["--bind_ip_all"]     # listen on all interfaces
          ports:
            - containerPort: 27017
          readinessProbe:
            tcpSocket: { port: 27017 }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            tcpSocket: { port: 27017 }
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
      volumes:
        - name: mongo-data
          emptyDir: {}                 # ephemeral (fine for local dev)
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: tickets
spec:
  selector: { app: mongodb }
  ports:
    - port: 27017
      targetPort: 27017
      name: mongo
  type: ClusterIP

================================================================================
FILE: k8s/20-api.yaml
================================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: tickets
spec:
  replicas: 1
  selector:
    matchLabels: { app: api }
  template:
    metadata:
      labels: { app: api }
    spec:
      containers:
        - name: api
          image: tickets-api:dev 
          imagePullPolicy: IfNotPresent
          env:
            - name: REDIS_HOST
              value: "redis"
            - name: REDIS_PORT
              value: "6379"
            - name: MONGO_URL
              value: "mongodb://mongodb:27017/tickets"
          ports:
            - containerPort: 3000            # echo-server listens on 80
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: tickets
spec:
  selector: { app: api }
  ports:
    - name: http
      port: 3000
      targetPort: 3000                        # forward service→pod 3000→3000
  type: ClusterIP

================================================================================
FILE: .github/workflows/deploy-frontend.yml
================================================================================

name: Deploy frontend to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install deps
        run: npm ci

      - name: Build (GitHub Pages)
        env:
          VITE_BASE_PATH: ${{ vars.VITE_BASE_PATH }}
          VITE_USE_HASH_ROUTER: 'true'
          VITE_API_BASE: ${{ vars.VITE_API_BASE }}
          VITE_SOCKET_URL: ${{ vars.VITE_SOCKET_URL }}
        run: npm run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
